plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm"
    id "org.jlleitschuh.gradle.ktlint" version "${ktlintGradle}"
    id "me.champeau.jmh" version "${champeauJMH}"
    // publishing
    id 'maven-publish'
    id 'signing'

    // TODO: remove once published to Maven
    id "com.github.johnrengelman.shadow" version "${johnrengelmanShadow}"
}

project.ext.artifactId = rootProject.name
archivesBaseName = project.artifactId

kotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation "com.nimbusds:nimbus-jose-jwt:${nimbusJoseJWTVersion}"
    implementation "com.github.multiformats:java-multibase:${javaMultibase}"
    implementation "com.google.code.gson:gson:2.9.0"
    implementation 'com.google.protobuf:protobuf-java:3.20.1'
    shadow("com.google.crypto.tink:tink:${googleTinkVersion}") {
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    shadow "com.zmannotes:varint:${zmanVarint}"
    // implementation 'org.bouncycastle:bcprov-jdk15on:1.69'

    // TODO look for a better solution
    // currently it's a workaround for shadow of the above deps
    testImplementation("com.google.crypto.tink:tink:${googleTinkVersion}") {
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    testImplementation "com.zmannotes:varint:${zmanVarint}"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.junit.jupiter:junit-jupiter:${jUnitJupiter}"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonKotlinVersion}"
}

sourceSets {
    test {
        kotlin.srcDirs += "src/testCommon/kotlin"
    }
}

task group {
    doLast {
        println(project.group)
    }
}

task artifactId {
    doLast {
        println(project.artifactId)
    }
}

task version {
    doLast {
        println(version)
    }
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "${jvmTarget}"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "${jvmTarget}"
}

// TODO tune settings
jmh {
    benchmarkMode = ["thrpt", "avgt"]
    warmupIterations = 0
    operationsPerInvocation = 1
    timeUnit = "ms"
    iterations = 1
    fork = 1
    includeTests = true
}

// publishing

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        // TODO switch to usual jar once all deps are available in Maven
        // maven(MavenPublication) {
        //     from components.java
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)

            artifactId = project.artifactId
            // the following is required only for shadow
            // https://github.com/johnrengelman/shadow/issues/544
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "DIDComm"
                description = "DIDComm for Java/Kotlin"
                url = "https://github.com/sicpa-dlab/didcomm-jvm"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "SICPA"
                        email = "DLCHOpenSourceContrib@sicpa.com"
                    }
                }
                scm {
                    connection = "scm:git:git://sicpa-dlab/didcomm-jvm.git"
                    developerConnection = "scm:git:ssh://sicpa-dlab/didcomm-jvm.git"
                    url = "https://github.com/sicpa-dlab/didcomm-jvm"
                }
            }

        }
    }

    // ORG_GRADLE_PROJECT_mavenOSSRHUsername=<jira-id>
    // ORG_GRADLE_PROJECT_mavenOSSRHPassword=<jira-password>
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            name = "mavenOSSRH"
            credentials(PasswordCredentials)
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    // ORG_GRADLE_PROJECT_signingKeyId=<gpg-signingKeyId> - in case of a sub-key
    // ORG_GRADLE_PROJECT_signingKey=<gpg-signingKey>
    // ORG_GRADLE_PROJECT_signingPassword=<gpg-signingPassword>

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    // NOTE Maven Central doesn't support sub-keys so we have to use primary one
    //def signingKeyId = findProperty("signingKeyId")
    // useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    useInMemoryPgpKeys(signingKey, signingPassword)

    // TODO switch to maven once all deps are available in Maven
    sign publishing.publications.shadow
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}
