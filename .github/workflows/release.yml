name: release

on:
  push:
    branches:
      - stable
  workflow_dispatch:
   #inputs:
   #  devN:
   #    description: 'development release number'
   #    required: false
   #    default: '0'

jobs:

  checks:
    name: check releases
    if: github.ref == 'refs/heads/stable'
    runs-on: ubuntu-latest
    outputs:
      proj_group: ${{ steps.proj_meta.outputs.proj_group }}
      proj_artifactId: ${{ steps.proj_meta.outputs.proj_artifactId }}
      current_version: ${{ steps.proj_meta.outputs.current_version }}
      release_info: ${{ steps.release_info.outputs.release_info }}
      asset_jar_url: ${{ steps.release_info.outputs.asset_jar_url }}
      upload_url:  ${{ steps.release_info.outputs.upload_url }}
      already_in_maven: ${{ steps.check_in_maven.outputs.already_in_maven != '' }}

    steps:
      - uses: actions/checkout@v3

      - name: Get the metadata
        id: proj_meta
        run: |
          group="$(gradle -q group)"
          echo "$group"
          echo "::set-output name=proj_group::$group"

          artifactId="$(gradle -q artifactId)"
          echo "$artifactId"
          echo "::set-output name=proj_artifactId::$artifactId"

          version="$(gradle -q version)"
          echo "$version"
          echo "::set-output name=current_version::$version"
        shell: bash

      - name: Get release info
        id: release_info
        run: |
          release_info="$(curl -s https://api.github.com/repos/${{ github.repository }}/releases \
              | jq '.[] | select(.name == "v${{ steps.proj_meta.outputs.current_version }}")')"
          echo "::set-output name=release_info::$release_info"
          echo "$release_info"

          asset_jar_url="$(echo "$release_info" \
              | jq -r '.assets[] | select(.name | match("^${{ steps.proj_meta.outputs.proj_artifactId }}.*\\.jar$")) | .browser_download_url')"
          echo "::set-output name=asset_jar_url::$asset_jar_url"
          echo "$asset_jar_url"

          upload_url="$(echo "$release_info" | jq -r '.upload_url')"
          echo "::set-output name=upload_url::$upload_url"
          echo "$upload_url"
        shell: bash

      - name: check if already deployed to Maven Central
        id: check_in_maven
        run: |
          out="$(curl -s 'https://search.maven.org/solrsearch/select?q=a:${{ steps.proj_meta.outputs.proj_artifactId }}+AND+g:${{ steps.proj_meta.outputs.proj_group }}+AND+v:${{ steps.proj_meta.outputs.current_version }}&wt=json'  \
               | jq -r '.response | .docs[] | .v')"
          echo "in maven check: $out"
          echo "::set-output name=already_in_maven::$out"
        shell: bash {0}  # to opt-out of default fail-fast behavior

  release:
    name: GitHub Release
    if: github.ref == 'refs/heads/stable'
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v3

        # XXX do we need that here
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - name: verify packaging
        id: build_assets
        if: ${{ !needs.checks.outputs.asset_jar_url }}
        run: |
          gradle jar
          ls lib/build/libs
          asset_jar_name="$(find lib/build/libs -name '*${{ steps.proj_meta.outputs.current_version }}.jar' -printf '%f')"
          echo "::set-output name=asset_jar_name::$asset_jar_name"
        shell: bash
          
      - name: Create GutHub Release
        id: create_release
        if: ${{ !needs.checks.outputs.release_info }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.checks.outputs.current_version }}
          release_name: v${{ needs.checks.outputs.current_version }}

      - name: Set upload url
        id: upload_url
        if: ${{ !needs.checks.outputs.asset_jar_url }}
        run: |
          if [[ -n "${{ needs.checks.outputs.upload_url }}" ]]; then
            echo "::set-output name=value::${{ needs.checks.outputs.upload_url }}"
          else
            echo "::set-output name=value::${{ steps.create_release.outputs.upload_url }}"
          fi

      # XXX ??? do we actually need that
      - name: Upload to GitHub
        if: ${{ !needs.checks.outputs.asset_jar_url }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: lib/build/libs/${{ steps.build_assets.outputs.asset_jar_name }}
          asset_name: ${{ steps.build_assets.outputs.asset_jar_name }}
          asset_content_type: application/octet-stream  # TODO check for less generic type


      # NOTE looks like there is no option to skip packaging here
      #      and use already prepared artifacts, so we publish to Maven first
      - name: Publish to Maven Central
        if: needs.checks.outputs.already_in_maven == 'false'
        env:
          # maven user creds
          ORG_GRADLE_PROJECT_mavenOSSRHUsername: ${{ secrets.MAVEN_USERNAME }}
          ORG_GRADLE_PROJECT_mavenOSSRHPassword: ${{ secrets.MAVEN_PASSWORD }}
          # creds of for an ascii-armored GPG subkey to sign for Maven
          # https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVEN_GPG_ARMORED_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVEN_GPG_PASSWORD }}
        run: gradle publishToSonatype closeAndReleaseSonatypeStagingRepository
        shell: bash

  deploy-dev-maven:
    name: Publish dev to Maven Central
    if: github.ref != 'refs/heads/stable' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set SNAPSHOT version
        run: |
          # TODO decide
          # sed -i -r "s~^version=(.+)~version=\1-0.dev.${{ github.event.inputs.devN }}~" ./gradle.properties
          sed -i -r "s~^version=(.+)~version=\1-SNAPSHOT~" ./gradle.properties
          grep version ./gradle.properties
        shell: bash

        # XXX do we need that here
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Publish to Maven Central
        env:
          ORG_GRADLE_PROJECT_mavenOSSRHUsername: ${{ secrets.MAVEN_USERNAME }}
          ORG_GRADLE_PROJECT_mavenOSSRHPassword: ${{ secrets.MAVEN_PASSWORD }}
          # creds of for an ascii-armored GPG subkey to sign for Maven
          # https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVEN_GPG_ARMORED_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVEN_GPG_PASSWORD }}
        run: gradle publish
        shell: bash
